#! /bin/bash

FW_CONFIG="/etc/sysconfig/SuSEfirewall2"
FW_CONFIG_LINE="FW_CONFIGURATIONS_EXT"
VNC_HTTPD_REGEX="FW_CONFIGURATIONS_EXT=.*vnc-httpd.*"
VNC_SERVER_REGEX="FW_CONFIGURATIONS_EXT=.*vnc-server.*"

# Ports to forward
PORTS="5800 5801 5900 5901"

# Colors
red="\e[31m"
green="\e[32m"
none="\e[39m"

# Switch vars
DEBUG=0
SKIP_HOSTS=0

trap "cleanup dead" 2

function launch_tunnel() {
	local port=$1
	local verbose=""
	if [[ $DEBUG == 1 ]]; then
		verbose="-vvvvv"
	fi

	ssh $verbose -o "ExitOnForwardFailure yes" -R *:$port:localhost:$port -N -f root@spectre
	return $?
}

function launch_tunnels() {
	for port in $PORTS; do
		printf "$port "
		if ! launch_tunnel $port; then
			return 1
		fi
	done

	return 0
}

function login_tunnel() {
	ssh -o "ExitOnForwardFailure yes" -R *:6666:localhost:22 -N -f root@spectre
	return $?
}

function kill_tunnels() {
	local pids=$(ps -ef | grep "ssh.*spectre.*" | grep -v grep | awk '{ print $2 }')
	for pid in $pids; do
		printf "$pid "
		kill $pid
	done
}

function restart_firewall() {	
	if ! sudo systemctl restart SuSEfirewall2; then
		return 1
	else
		return 0
	fi
}

function open_firewall() {
	if ! grep -q $VNC_HTTPD_REGEX $FW_CONFIG; then
		sudo sed -i "s/$FW_CONFIG_LINE=\"\(.*\)\"/$FW_CONFIG_LINE=\"\1 vnc-httpd\"/" $FW_CONFIG
	fi

	if ! grep -q $VNC_SERVER_REGEX $FW_CONFIG; then
		sudo sed -i "s/$FW_CONFIG_LINE=\"\(.*\)\"/$FW_CONFIG_LINE=\"\1 vnc-server\"/" $FW_CONFIG
	fi

	restart_firewall || return 1
	return 0
}

function close_firewall() {
	if grep -q $VNC_HTTPD_REGEX $FW_CONFIG; then
		sudo sed -i "s/$FW_CONFIG_LINE=\"\(.*\)vnc-httpd\(.*\)\"/$FW_CONFIG_LINE=\"\1 \2\"/" $FW_CONFIG
	fi

	if grep -q $VNC_SERVER_REGEX $FW_CONFIG; then
		sudo sed -i "s/$FW_CONFIG_LINE=\"\(.*\)vnc-server\(.*\)\"/$FW_CONFIG_LINE=\"\1 \2\"/" $FW_CONFIG
	fi

	restart_firewall || return 1
	return 0
}

function fix_hosts() {
	local ip=$1
	if ! grep -q "$ip.*spectre" /etc/hosts; then
		sudo sed -i "s/.*spectre/$ip\tspectre/" /etc/hosts
		printf "fixed "
	else
		printf "nothing to do "
	fi

	sudo systemctl restart nscd.service || return 1
	return 0
}

function print_ok() {
	printf "${green}OK${none}\n"	
}

function print_fail() {
	printf "${red}FAIL${none}\n"
}

function cleanup() {
	local dead=$1
	printf "\nClosing VNC ports... "
	if ! close_firewall; then
		print_fail
		echo "Failed to close ports.  Not fatal, but should be checked out."
	else
		print_ok
	fi

	printf "Killing SSH tunnel processes... "
	if ! kill_tunnels; then
		print_fail
		echo "Failed to kill the tunnels.  Not fatal, but you might want to reboot"
	else
		print_ok
	fi

	if [[ $dead == dead ]]; then
		exit 1
	fi
}

function usage() {
	cat << EOF
vnc_tunnel: usage: vnc_tunnel [-h] [-d]
		-d	Show debug output
		-h	Don't regenerate the /etc/hosts file
EOF
	exit 0
}

# Process switches
OPT="dh"
while getopts $OPT opt; do
	case $opt in
		d)
		DEBUG=1;;
		h)
		SKIP_HOSTS=1;;
		\?)
		usage
	esac
done

if [[ $DEBUG == 1 ]]; then
	set -x
fi

if [[ $SKIP_HOSTS != 1 ]]; then
	IP=""
	while ! echo $IP | grep -qEo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'; do
		printf "Enter IP Address: "
		read IP

		if ! ping -c 1 $IP > /dev/null; then
			echo "This IP is not responding to a ping.  Exiting."
			cleanup dead
		fi
	done

	printf "Fixing /etc/hosts file... "
	if ! fix_hosts $IP; then
		print_fail
		echo "Failed to update /etc/hosts. Exiting"
		cleanup dead
	else
		print_ok
	fi
else
	echo "Skipping /etc/hosts update..."
fi 

printf "Opening VNC ports... "
if ! open_firewall; then
	print_fail
	echo "Failed to open ports.  Exiting"
	cleanup dead
else
	print_ok
fi

printf "Setting up SSH tunnels for VNC... "
if ! launch_tunnels; then
	print_fail
	echo "Failed to set up SSH tunnels for VNC.  Exiting."
	cleanup dead
else
	print_ok
fi

printf "Setting up SSH tunnel for login... "
if ! login_tunnel; then
	print_fail
	echo "Failed to set up login SSH tunnel.  Exiting."
	cleanup dead
else
	print_ok
fi

# there really isn't any error checking here...
#if ! try_function launch_tunnels "Creating SSH tunnels"; then
#	echo "Failed to create SSH tunnels.  Exiting"
#	exit 2
#fi

# Just in case any error output comes from the ssh commands.
sleep 2

input=
while [[ $input != "done" ]]; do
	printf "Type done to quit: "
	read input
done

cleanup
exit 0
